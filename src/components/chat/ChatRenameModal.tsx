'use client'

import React, { useState } from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog'
import { Badge } from '@/components/ui/badge'
import { Sparkles, Edit3, Check, X } from 'lucide-react'

interface ChatRenameModalProps {
  isOpen: boolean
  onClose: () => void
  currentName: string
  conversationId: string
  onRename: (newName: string) => void
  isAutoGenerated?: boolean
}

export function ChatRenameModal({
  isOpen,
  onClose,
  currentName,
  conversationId,
  onRename,
  isAutoGenerated = false
}: ChatRenameModalProps) {
  const [newName, setNewName] = useState(currentName)
  const [isGenerating, setIsGenerating] = useState(false)
  const [isRenaming, setIsRenaming] = useState(false)
  const [error, setError] = useState('')
  const [suggestions, setSuggestions] = useState<string[]>([])

  const handleAutoGenerate = async () => {
    setIsGenerating(true)
    setError('')
    
    try {
      const response = await fetch(`/api/conversations/${conversationId}/rename`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }
      })
      
      const data = await response.json()
      
      if (data.success) {
        setNewName(data.generatedName)
        // Show success animation
        const button = document.querySelector('[data-auto-generate]')
        if (button) {
          button.classList.add('animate-pulse', 'bg-green-500')
          setTimeout(() => {
            button.classList.remove('animate-pulse', 'bg-green-500')
          }, 1000)
        }
      } else {
        setError(data.error || 'Failed to generate name')
      }
    } catch (error) {
      setError('Failed to generate name')
      console.error('Auto-generate error:', error)
    } finally {
      setIsGenerating(false)
    }
  }

  const handleRename = async () => {
    if (!newName.trim()) {
      setError('Chat name cannot be empty')
      return
    }

    if (newName.trim() === currentName) {
      onClose()
      return
    }

    setIsRenaming(true)
    setError('')
    
    try {
      const response = await fetch(`/api/conversations/${conversationId}/rename`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ newName: newName.trim() })
      })
      
      const data = await response.json()
      
      if (data.success) {
        onRename(data.newName)
        onClose()
        
        // Show success notification
        const notification = document.createElement('div')
        notification.className = 'fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg z-50 animate-slide-in'
        notification.textContent = 'âœ… Chat renamed successfully!'
        document.body.appendChild(notification)
        
        setTimeout(() => {
          notification.classList.add('animate-slide-out')
          setTimeout(() => document.body.removeChild(notification), 300)
        }, 2000)
      } else {
        setError(data.error || 'Failed to rename chat')
      }
    } catch (error) {
      setError('Failed to rename chat')
      console.error('Rename error:', error)
    } finally {
      setIsRenaming(false)
    }
  }

  const generateSuggestions = () => {
    const content = currentName.toLowerCase()
    const newSuggestions = []
    
    if (content.includes('ocean') || content.includes('marine')) {
      newSuggestions.push('Ocean Research Analysis')
    }
    if (content.includes('temperature') || content.includes('temp')) {
      newSuggestions.push('Temperature Profile Study')
    }
    if (content.includes('argo')) {
      newSuggestions.push('ARGO Float Investigation')
    }
    
    newSuggestions.push('Marine Science Discussion')
    newSuggestions.push('Oceanographic Data Analysis')
    
    setSuggestions([...new Set(newSuggestions)].slice(0, 3))
  }

  React.useEffect(() => {
    if (isOpen) {
      setNewName(currentName)
      setError('')
      generateSuggestions()
    }
  }, [isOpen, currentName])

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Edit3 className="w-5 h-5 text-blue-500" />
            Rename Chat
          </DialogTitle>
          <DialogDescription>
            Give your conversation a memorable name to easily find it later.
          </DialogDescription>
        </DialogHeader>
        
        <div className="space-y-4">
          {/* Current name display */}
          <div className="flex items-center gap-2 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg">
            <span className="text-sm text-gray-600 dark:text-gray-400">Current:</span>
            <span className="font-medium">{currentName}</span>
            {isAutoGenerated && (
              <Badge variant="secondary" className="text-xs">
                <Sparkles className="w-3 h-3 mr-1" />
                AI Generated
              </Badge>
            )}
          </div>

          {/* Name input */}
          <div className="space-y-2">
            <Label htmlFor="chat-name">New Name</Label>
            <Input
              id="chat-name"
              value={newName}
              onChange={(e) => setNewName(e.target.value)}
              placeholder="Enter chat name..."
              maxLength={100}
              className="w-full"
            />
            <div className="flex justify-between text-xs text-gray-500">
              <span>{newName.length}/100 characters</span>
              {error && <span className="text-red-500">{error}</span>}
            </div>
          </div>

          {/* Auto-generate button */}
          <Button
            data-auto-generate
            variant="outline"
            onClick={handleAutoGenerate}
            disabled={isGenerating}
            className="w-full transition-all duration-200"
          >
            {isGenerating ? (
              <>
                <div className="w-4 h-4 border-2 border-blue-500 border-t-transparent rounded-full animate-spin mr-2" />
                Generating...
              </>
            ) : (
              <>
                <Sparkles className="w-4 h-4 mr-2" />
                Auto-Generate Name
              </>
            )}
          </Button>

          {/* Suggestions */}
          {suggestions.length > 0 && (
            <div className="space-y-2">
              <Label className="text-sm text-gray-600 dark:text-gray-400">
                Quick Suggestions:
              </Label>
              <div className="flex flex-wrap gap-2">
                {suggestions.map((suggestion, index) => (
                  <Button
                    key={index}
                    variant="ghost"
                    size="sm"
                    onClick={() => setNewName(suggestion)}
                    className="text-xs h-7 px-2 bg-blue-50 hover:bg-blue-100 dark:bg-blue-900/20 dark:hover:bg-blue-900/40 text-blue-700 dark:text-blue-300"
                  >
                    {suggestion}
                  </Button>
                ))}
              </div>
            </div>
          )}
        </div>

        <DialogFooter className="flex gap-2">
          <Button
            variant="outline"
            onClick={onClose}
            disabled={isRenaming}
          >
            <X className="w-4 h-4 mr-2" />
            Cancel
          </Button>
          <Button
            onClick={handleRename}
            disabled={isRenaming || !newName.trim()}
            className="bg-blue-500 hover:bg-blue-600"
          >
            {isRenaming ? (
              <>
                <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                Renaming...
              </>
            ) : (
              <>
                <Check className="w-4 h-4 mr-2" />
                Rename Chat
              </>
            )}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}
